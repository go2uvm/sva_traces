/********************************************
* VerifWorks Go2UVM App: VW_DVC_Go2UVM
* Automatically generated by VerifWorks's DVC_Go2UVM Riviera Apps 
* Thanks for using VerifWorks products
* Visit http://www.verifworks.com for more 
* Generated on   : 2016-05-27 13:39:20
********************************************/ 



// Generating SystemVerilog interface for module: accept_test
// ---------------------------------------------------------
interface accept_test_if ();
  logic  [0:0] clk;
  logic  [0:0] data_transfer;
  logic  [0:0] dma_req;
  logic  [0:0] done;
  logic  [0:0] reset_n;
  // End of interface signals 


  // Start of clocking block definition 
  clocking cb @(posedge clk);
    output clk;
    output data_transfer;
    output dma_req;
    output done;
    output reset_n;
  endclocking : cb
  // End of clocking block definition 

endinterface : accept_test_if
// Automatically generated from VerifWorks's DVCreate-Go2UVM product
// Thanks for using VerifWorks products, see http://www.verifworks.com for more

import uvm_pkg::*;
`include uvm_macros.svh
// Import Go2UVM Package
import vw_go2uvm_pkg::*;
// Use the base class provided by the vw_go2uvm_pkg
class accept_test_test extends go2uvm_base_test;
  // Create a handle to the actual interface
  virtual accept_test_if vif;
  task reset;
    `uvm_info (log_id, "Start of reset", UVM_MEDIUM)
    `uvm_info (log_id, "Fill in your reset logic here ", UVM_MEDIUM)
    // this.vif.cb.rst_n <= 1'b0;
    // repeat (5) @ (this.vif.cb);
    // this.vif.cb.rst_n <= 1'b1;
    // repeat (1) @ (this.vif.cb);
    `uvm_info (log_id, "End of reset", UVM_MEDIUM)
  endtask : reset
  task main ();
    `uvm_info (log_id, "Start of main", UVM_MEDIUM)
    `uvm_info (log_id, "Fill in your main logic here ", UVM_MEDIUM)
    // this.vif.cb.inp_1 <= 1'b0;
    // this.vif.cb.inp_2 <= 22;
    // repeat (5) @ (this.vif.cb);
    `uvm_info (log_id, "End of main", UVM_MEDIUM)
  endtask : main
endclass : accept_test_test

module accept_test_go2uvm;
  timeunit 1ns;
  timeprecision 1ns;
  parameter VW_CLK_PERIOD = 10;

  // Simple clock generator
  bit `VW_CLK ;
  always # (VW_CLK_PERIOD/2) `VW_CLK <= ~`VW_CLK;

  // Interface instance
  accept_test_if accept_test_if_0 (.*);

  // Connect TB clk to Interface instance clk

  // DUT instance
  accept_test accept_test_0 ();


  // Using VW_Go2UVM
  accept_test_test accept_test_test_0;
  initial begin : go2uvm_test
    accept_test_test_0 = new ();
    // Connect virtual interface to physical interface
    accept_test_test_0.vif = accept_test_if_0;
    // Kick start standard UVM phasing
    run_test ();
  end : go2uvm_test
endmodule : accept_test_go2uvm

