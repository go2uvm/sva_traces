/********************************************
* VerifWorks Go2UVM App: VW_DVC_Go2UVM
* Automatically generated by VerifWorks's DVC_Go2UVM Riviera Apps 
* Thanks for using VerifWorks products
* Visit http://www.verifworks.com for more 
* Generated on   : 2016-05-27 13:52:02
********************************************/ 



// Generating SystemVerilog interface for module: an_conseq_matches
// ---------------------------------------------------------
interface an_conseq_matches_if (input logic clk);
  logic  [0:0] a;
  logic  [0:0] b;
  logic  [0:0] c;
  logic  [0:0] reset_n;
  // End of interface signals 


  // Start of clocking block definition 
  clocking cb @(posedge clk);
    output a;
    output b;
    output c;
    output reset_n;
  endclocking : cb
  // End of clocking block definition 

endinterface : an_conseq_matches_if
// Automatically generated from VerifWorks's DVCreate-Go2UVM product
// Thanks for using VerifWorks products, see http://www.verifworks.com for more

import uvm_pkg::*;
`include "uvm_macros.svh"
// Import Go2UVM Package
import vw_go2uvm_pkg::*;
// Use the base class provided by the vw_go2uvm_pkg
class an_conseq_matches_test extends go2uvm_base_test;
  // Create a handle to the actual interface
  virtual an_conseq_matches_if vif;
  task reset;
    `uvm_info (log_id, "Start of reset", UVM_MEDIUM)
    //`uvm_info (log_id, "Fill in your reset logic here ", UVM_MEDIUM)
     this.vif.cb.reset_n <= 1'b0;
     repeat (5) @ (this.vif.cb);
     this.vif.cb.reset_n <= 1'b1;
     repeat (1) @ (this.vif.cb);
    `uvm_info (log_id, "End of reset", UVM_MEDIUM)
  endtask : reset
  task main ();
    `uvm_info (log_id, "Start of main", UVM_MEDIUM)
    `uvm_info (log_id, "SVA should pass ", UVM_MEDIUM)
	@(vif.cb);
		begin
		 @(vif.cb);
			vif.cb.a <= 1'b1;
			vif.cb.b <= 1'b0;
		 @(vif.cb);
		 @(vif.cb);

		 @(vif.cb);
			vif.cb.b <= 1'b1;
		 @(vif.cb);
			`uvm_info (log_id, "SVA should pass ", UVM_MEDIUM)

		 @(vif.cb);
			vif.cb.a <= 1'b0;
			vif.cb.b <= 1'b0;

		 @(vif.cb);
			vif.cb.a <= 1'b1;
			vif.cb.b <= 1'b0;
		 @(vif.cb);
		 @(vif.cb);
		 @(vif.cb);
		 @(vif.cb);
		 @(vif.cb);
		 @(vif.cb);
		 @(vif.cb);
			`uvm_info (log_id, "SVA should fail ", UVM_MEDIUM)

		 @(vif.cb);


		end


    `uvm_info (log_id, "End of main", UVM_MEDIUM)
  endtask : main
endclass : an_conseq_matches_test

module an_conseq_matches_go2uvm;
  timeunit 1ns;
  timeprecision 1ns;
  parameter VW_CLK_PERIOD = 10;

  // Simple clock generator
  bit clk;
  always # (VW_CLK_PERIOD/2) clk <= ~clk;

  // Interface instance
  an_conseq_matches_if an_conseq_matches_if_0 (.*);

  // Connect TB clk to Interface instance clk

  // DUT instance
  an_conseq_matches an_conseq_matches_0 (.clk(clk),
						.a(an_conseq_matches_if_0.a),
						.b(an_conseq_matches_if_0.b),
						.c(an_conseq_matches_if_0.c),
						.reset_n(an_conseq_matches_if_0.reset_n)
						);


  // Using VW_Go2UVM
  an_conseq_matches_test an_conseq_matches_test_0;
  initial begin : go2uvm_test
    an_conseq_matches_test_0 = new ();
    // Connect virtual interface to physical interface
    an_conseq_matches_test_0.vif = an_conseq_matches_if_0;
    // Kick start standard UVM phasing
    run_test ();
  end : go2uvm_test
endmodule : an_conseq_matches_go2uvm

