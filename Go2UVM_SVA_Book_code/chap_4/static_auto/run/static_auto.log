asim +access +rw  $UVMSIM +UVM_VERBOSITY=UVM_FULL
# ELBREAD: Elaboration process.
# ELBREAD: Elaboration time 0.7 [s].
# KERNEL: Main thread initiated.
# KERNEL: Kernel process initialization phase.
# KERNEL: Time resolution set to 1ps.
# ELAB2: Elaboration final pass...
# KERNEL: PLI/VHPI kernel's engine initialization done.
# PLI: Loading library '/home/student/tools/eda/RVRA_2015.02/bin/libsystf.so'
# KERNEL: Info: Loading library:  /home/student/tools/eda/RVRA_2015.02/bin/uvm_1_1d_dpi
# ELAB2: Create instances ...
# ELAB2: Create instances complete.
# SLP: Started
# SLP: Elaboration phase ...
# SLP: Warning: uvm.sv (62): Length of connection (1) does not match the length of port "data" (9) on instance "/top/dut".
# SLP: Elaboration phase ... done : 0.0 [s]
# SLP: Generation phase ...
# SLP: Generation phase ... done : 0.1 [s]
# SLP: Finished : 0.1 [s]
# SLP: 0 primitives and 2 (18.18%) other processes in SLP
# SLP: 3 (0.01%) signals in SLP and 12 (0.05%) interface signals
# ELAB2: Elaboration final pass complete - time: 1.9 [s].
# KERNEL: SLP loading done - time: 0.0 [s].
# KERNEL: SLP simulation initialization done - time: 0.0 [s].
# KERNEL: Kernel process initialization done.
# Allocation: Simulator allocated 45728 kB (elbread=21735 elab2=21657 kernel=2335 sdf=0)
# KERNEL: ----------------------------------------------------------------
# KERNEL: UVM-1.1  d
# KERNEL: (C) 2007-2013 Mentor Graphics Corporation
# KERNEL: (C) 2007-2013 Cadence Design Systems, Inc.
# KERNEL: (C) 2006-2013 Synopsys, Inc.
# KERNEL: (C) 2011-2013 Cypress Semiconductor Corp.
# KERNEL: ----------------------------------------------------------------
# KERNEL: 
# KERNEL:   ***********       IMPORTANT RELEASE NOTES         ************
# KERNEL: 
# KERNEL:   You are using a version of the UVM library that has been compiled
# KERNEL:   with `UVM_NO_DEPRECATED undefined.
# KERNEL:   See http://www.eda.org/svdb/view.php?id=3313 for more details.
# KERNEL: 
# KERNEL:   You are using a version of the UVM library that has been compiled
# KERNEL:   with `UVM_OBJECT_MUST_HAVE_CONSTRUCTOR undefined.
# KERNEL:   See http://www.eda.org/svdb/view.php?id=3770 for more details.
# KERNEL: 
# KERNEL:       (Specify +UVM_NO_RELNOTES to turn off this notice)
# KERNEL: 
# KERNEL: Assertion failures tracking enabled, report enabled, unlimited, action Continue. Assertion passes tracking enabled, report disabled, unlimited.
# KERNEL: ASDB file was created in location /home/student/arlin/Chap_4_corrected/Done/static_auto/run/dataset.asdb
wave -rec sim:/* 
run -all;
# KERNEL: UVM_INFO @ 0: Go2UVM [Go2UVM ] RELNOTES
# KERNEL: 
# KERNEL: ----------------------------------------------------------------
# KERNEL: (C) 2004-2014 CVC Pvt Ltd. 
# KERNEL:  CVC_Go2UVM Version 1.1d.5 (CVC http://www.cvcblr.com )
# KERNEL: 
# KERNEL:   ***********       IMPORTANT RELEASE NOTES         ************
# KERNEL: 
# KERNEL:   You are using a version of the Go2UVM Package from CVC www.cvcblr.com
# KERNEL:   See http://www.go2uvm.org for more details 
# KERNEL: 
# KERNEL: ----------------------------------------------------------------
# KERNEL: UVM_INFO @ 0: reporter [RNTST] Running test ...
# KERNEL: UVM_INFO /home/student/arlin/Chap_4_corrected/Done/static_auto/uvm/uvm.sv(36) @ 0.000 ns: Go2UVM [Go2UVM] Start of reset
# KERNEL: @   0.010 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)           0 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           0 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           0 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           0 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           0 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           0 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           0 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           0 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           0 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)           0 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)           1 data[const'(static_lp)]= z
# KERNEL: const'(static_lp)           2 data[const'(static_lp)]= z
# KERNEL: const'(static_lp)           3 data[const'(static_lp)]= z
# KERNEL: const'(static_lp)           4 data[const'(static_lp)]= z
# KERNEL: const'(static_lp)           5 data[const'(static_lp)]= z
# KERNEL: const'(static_lp)           6 data[const'(static_lp)]= z
# KERNEL: const'(static_lp)           7 data[const'(static_lp)]= z
# KERNEL: const'(static_lp)           8 data[const'(static_lp)]= z
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 10ps (1 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 10ps (1 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 10ps (1 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 10ps (1 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 10ps (1 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 10ps (1 clk)
# KERNEL: @   0.030 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)           9 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           9 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           9 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           9 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           9 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           9 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           9 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           9 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)           9 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)           9 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          10 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          11 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          12 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          13 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          14 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          15 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          16 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          17 data[const'(static_lp)]= x
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 30ps (2 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 30ps (2 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 30ps (2 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 30ps (2 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 30ps (2 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 30ps (2 clk)
# KERNEL: @   0.050 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)          18 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          18 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          18 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          18 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          18 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          18 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          18 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          18 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          18 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)          18 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          19 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          20 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          21 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          22 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          23 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          24 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          25 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          26 data[const'(static_lp)]= x
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 50ps (3 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 50ps (3 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 50ps (3 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 50ps (3 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 50ps (3 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 50ps (3 clk)
# KERNEL: @   0.070 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)          27 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          27 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          27 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          27 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          27 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          27 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          27 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          27 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          27 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)          27 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          28 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          29 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          30 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          31 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          32 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          33 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          34 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          35 data[const'(static_lp)]= x
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 70ps (4 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 70ps (4 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 70ps (4 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 70ps (4 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 70ps (4 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 70ps (4 clk)
# KERNEL: @   0.090 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)          36 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          36 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          36 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          36 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          36 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          36 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          36 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          36 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          36 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)          36 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          37 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          38 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          39 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          40 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          41 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          42 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          43 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          44 data[const'(static_lp)]= x
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 90ps (5 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 90ps (5 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 90ps (5 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 90ps (5 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 90ps (5 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 90ps (5 clk)
# KERNEL: @   0.110 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)          45 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          45 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          45 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          45 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          45 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          45 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          45 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          45 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          45 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)          45 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          46 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          47 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          48 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          49 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          50 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          51 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          52 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          53 data[const'(static_lp)]= x
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 110ps (6 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 110ps (6 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 110ps (6 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 110ps (6 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 110ps (6 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 110ps (6 clk)
# KERNEL: @   0.130 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)          54 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          54 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          54 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          54 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          54 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          54 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          54 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          54 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          54 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)          54 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          55 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          56 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          57 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          58 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          59 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          60 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          61 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          62 data[const'(static_lp)]= x
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 130ps (7 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 130ps (7 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 130ps (7 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 130ps (7 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 130ps (7 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 130ps (7 clk)
# KERNEL: @   0.150 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)          63 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          63 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          63 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          63 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          63 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          63 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          63 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          63 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          63 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)          63 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          64 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          65 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          66 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          67 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          68 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          69 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          70 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          71 data[const'(static_lp)]= x
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 150ps (8 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 150ps (8 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 150ps (8 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 150ps (8 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 150ps (8 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 150ps (8 clk)
# KERNEL: @   0.170 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)          72 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          72 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          72 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          72 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          72 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          72 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          72 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          72 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          72 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)          72 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          73 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          74 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          75 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          76 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          77 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          78 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          79 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          80 data[const'(static_lp)]= x
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 170ps (9 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 170ps (9 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 170ps (9 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 170ps (9 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 170ps (9 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 170ps (9 clk)
# KERNEL: @   0.190 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)          81 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          81 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          81 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          81 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          81 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          81 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          81 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          81 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          81 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)          81 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          82 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          83 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          84 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          85 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          86 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          87 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          88 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          89 data[const'(static_lp)]= x
# KERNEL: UVM_INFO /home/student/arlin/Chap_4_corrected/Done/static_auto/uvm/uvm.sv(38) @ 0.190 ns: Go2UVM [Go2UVM] End of reset
# KERNEL: UVM_INFO @ 0.190 ns: Go2UVM [Go2UVM] Driving stimulus via UVM
# KERNEL: UVM_INFO /home/student/arlin/Chap_4_corrected/Done/static_auto/uvm/uvm.sv(43) @ 0.190 ns: Go2UVM [Go2UVM] Start of Test
# KERNEL: Error: Assertion 'ap_data012' FAILED at time: 190ps (10 clk), ../dut/static_auto.sv(9), scope: top.dut, start-time: 190ps (10 clk)
# KERNEL: Error: Assertion 'ap_data0to8' FAILED at time: 190ps (10 clk), ../dut/static_auto.sv(18), scope: top.dut, start-time: 190ps (10 clk)
# KERNEL: Error: Assertion 'ap_const_static_lp' FAILED at time: 190ps (10 clk), ../dut/static_auto.sv(29), scope: top.dut, start-time: 190ps (10 clk)
# KERNEL: @   0.210 ns  data=zzzzzzzzx
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: auto_lp           0 data[auto_lp]= x
# KERNEL: auto_lp           1 data[auto_lp]= z
# KERNEL: auto_lp           2 data[auto_lp]= z
# KERNEL: $sampled(static_lp)          90 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          90 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          90 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          90 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          90 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          90 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          90 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          90 data[$sampled(static_lp)]= x
# KERNEL: $sampled(static_lp)          90 data[$sampled(static_lp)]= x
# KERNEL: const'(static_lp)          90 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          91 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          92 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          93 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          94 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          95 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          96 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          97 data[const'(static_lp)]= x
# KERNEL: const'(static_lp)          98 data[const'(static_lp)]= x
# KERNEL: UVM_INFO /home/student/arlin/Chap_4_corrected/Done/static_auto/uvm/uvm.sv(48) @ 0.210 ns: Go2UVM [Go2UVM] End of Test
# KERNEL: UVM_INFO @ 0.210 ns: Go2UVM [Go2UVM] End of stimulus
# KERNEL: UVM_INFO @ 0.210 ns: Go2UVM [Go2UVM] Thanks for using CVC's Go2UVM Package, provide your feedback at http://www.go2uvm.org
# KERNEL: 
# KERNEL: --- UVM Report Summary ---
# KERNEL: 
# KERNEL: ** Report counts by severity
# KERNEL: UVM_INFO :    9
# KERNEL: UVM_WARNING :    0
# KERNEL: UVM_ERROR :    0
# KERNEL: UVM_FATAL :    0
# KERNEL: ** Report counts by id
# KERNEL: [Go2UVM]     7
# KERNEL: [Go2UVM ]     1
# KERNEL: [RNTST]     1
# RUNTIME: Info: RUNTIME_0068 uvm_root.svh (433): $finish called.
# KERNEL: Time: 210 ps,  Iteration: 67,  Instance: /top,  Process: @INITIAL#71_1@.
# KERNEL: stopped at time: 210 ps
# VSIM: Simulation has finished. There are no more test vectors to simulate.
quit
# VSIM: Simulation has finished.
